(window.webpackJsonp=window.webpackJsonp||[]).push([[44,33],{"examples/slickgrid/example4":function(t,e,i){"use strict";i.r(e),i.d(e,"Example4",(function(){return u}));var a=i("qQke"),r=i("1aCK"),n=i("aurelia-framework"),l=i("xiok"),s=i("aurelia-slickgrid"),o=function(t,e,i,a){var r,n=arguments.length,l=n<3?e:null===a?a=Object.getOwnPropertyDescriptor(e,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(t,e,i,a);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(l=(n<3?r(l):n>3?r(e,i,l):r(e,i))||l);return n>3&&l&&Object.defineProperty(e,i,l),l},d=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};function c(t,e){return Math.floor(Math.random()*(e-t+1)+t)}var u=function(){function t(t,e){this.http=t,this.httpFetch=e,this.title="Example 4: Client Side Sort/Filter",this.subTitle='\n  Sort/Filter on client side only using SlickGrid DataView (<a href="https://github.com/ghiscoding/aurelia-slickgrid/wiki/Sorting" target="_blank">Wiki docs</a>)\n  <br/>\n  <ul class="small">\n    <li>Support multi-sort (by default), hold "Shift" key and click on the next column to sort.</li>\n    <li>All column types support the following operators: (>, >=, <, <=, <>, !=, =, ==, *)</li>\n    <ul>\n      <li>Example: >100 ... >=2001-01-01 ... >02/28/17</li>\n      <li><b>Note:</b> For filters to work properly (default is string), make sure to provide a FieldType (type is against the dataset, not the Formatter)</li>\n    </ul>\n    <li>Date Filters</li>\n    <ul>\n      <li>\n        FieldType of dateUtc/date (from dataset) can use an extra option of "filterSearchType" to let user filter more easily.\n        For example, in the "UTC Date" field below, you can type "&gt;02/28/2017", also when dealing with UTC you have to take the time difference in consideration.\n      </li>\n    </ul>\n    <li>On String filters, (*) can be used as startsWith (Hello* => matches "Hello Word") ... endsWith (*Doe => matches: "John Doe")</li>\n    <li>Custom Filter are now possible, "Description" column below, is a customized InputFilter with different placeholder. See <a href="https://github.com/ghiscoding/aurelia-slickgrid/wiki/Custom-Filter" target="_blank">Wiki - Custom Filter</a></li>\n  </ul>\n',this.defineGrid()}return t.prototype.attached=function(){this.dataset=this.mockData(1500)},t.prototype.detached=function(){this.saveCurrentGridState()},t.prototype.aureliaGridReady=function(t){this.aureliaGrid=t},t.prototype.defineGrid=function(){this.columnDefinitions=[{id:"title",name:"Title",field:"title",filterable:!0,sortable:!0,type:s.FieldType.string,minWidth:45,filter:{model:s.Filters.compoundInputText}},{id:"description",name:"Description",field:"description",filterable:!0,sortable:!0,minWidth:80,type:s.FieldType.string,filter:{model:new l.a,enableTrimWhiteSpace:!0}},{id:"duration",name:"Duration (days)",field:"duration",sortable:!0,type:s.FieldType.number,exportCsvForceToKeepAsString:!0,minWidth:55,filterable:!0,filter:{model:s.Filters.multipleSelect,collectionAsync:this.httpFetch.fetch("assets/data/collection_500_numbers.json"),collectionFilterBy:[{property:"value",operator:s.OperatorType.notEqual,value:360},{property:"value",operator:s.OperatorType.notEqual,value:365}],collectionSortBy:{property:"value",sortDesc:!0,fieldType:s.FieldType.number},customStructure:{value:"value",label:"label",optionLabel:"value",labelSuffix:"text"},collectionOptions:{separatorBetweenTextLabels:" ",filterResultAfterEachPass:"chain"},filterOptions:{maxHeight:250,width:175,useSelectOptionLabelToHtml:!0}}},{id:"complete",name:"% Complete",field:"percentComplete",formatter:s.Formatters.percentCompleteBar,minWidth:70,type:s.FieldType.number,sortable:!0,filterable:!0,filter:{model:s.Filters.compoundInputNumber}},{id:"start",name:"Start",field:"start",formatter:s.Formatters.dateIso,sortable:!0,minWidth:75,exportWithFormatter:!1,type:s.FieldType.date,filterable:!0,filter:{model:s.Filters.compoundDate}},{id:"usDateShort",name:"US Date Short",field:"usDateShort",sortable:!0,minWidth:70,width:70,type:s.FieldType.dateUsShort,filterable:!0,filter:{model:s.Filters.compoundDate}},{id:"utcDate",name:"UTC Date",field:"utcDate",formatter:s.Formatters.dateTimeIsoAmPm,sortable:!0,minWidth:115,type:s.FieldType.dateUtc,outputType:s.FieldType.dateTimeIsoAmPm,filterable:!0,filter:{model:s.Filters.compoundDate,filterOptions:{minDate:"today"}}},{id:"effort-driven",name:"Effort Driven",field:"effortDriven.isEffort",minWidth:85,maxWidth:95,type:s.FieldType.boolean,sortable:!0,formatter:s.Formatters.multiple,params:{formatters:[s.Formatters.complexObject,s.Formatters.checkmark]},filterable:!0,filter:{collection:["","True","False"],model:s.Filters.singleSelect,filterOptions:{maxHeight:250}}}],this.gridOptions={autoResize:{containerId:"demo-container",sidePadding:10},enableExcelExport:!0,enableExcelCopyBuffer:!0,enableFiltering:!0,showCustomFooter:!0,presets:{filters:[{columnId:"duration",searchTerms:[10,98]},{columnId:"usDateShort",operator:"<",searchTerms:["4/20/25"]}],sorters:[{columnId:"duration",direction:"DESC"},{columnId:"complete",direction:"ASC"}]}}},t.prototype.mockData=function(t,e){void 0===e&&(e=0);for(var i=[],a=e;a<e+t;a++){var r=Math.round(100*Math.random()),n=c(2e3,2035),l=c(10,35),s=c(1,12),o=s<10?"0"+s:s,d=c(10,28),u=c(0,100),p=c(10,23),m=c(10,59),f=""+c(1,9)+c(10,99),g=a%3==0;i.push({id:a,title:"Task "+a,description:a%5?"desc "+a:null,duration:r,percentComplete:u,percentCompleteNumber:u,start:a%4?null:new Date(n,s,d),usDateShort:s+"/"+d+"/"+l,utcDate:n+"-"+o+"-"+d+"T"+p+":"+m+":"+m+"."+f+"Z",effortDriven:{isEffort:g,label:g?"Effort":"NoEffort"}})}return i},t.prototype.gridStateChanged=function(t){console.log("Client sample, Grid State changed:: ",t)},t.prototype.saveCurrentGridState=function(){console.log("Client sample, current Grid State:: ",this.aureliaGrid.gridStateService.getCurrentGridState())},t.prototype.setFiltersDynamically=function(){this.aureliaGrid.filterService.updateFilters([{columnId:"duration",searchTerms:[2,25,48,50]},{columnId:"complete",searchTerms:[95],operator:"<"},{columnId:"effort-driven",searchTerms:[!0]},{columnId:"start",operator:">=",searchTerms:["2001-02-28"]}])},t.prototype.setSortingDynamically=function(){this.aureliaGrid.sortService.updateSorting([{columnId:"duration",direction:"ASC"},{columnId:"start",direction:"DESC"}])},t.prototype.refreshMetrics=function(t,e){var i=this;e&&e.current>=0&&setTimeout((function(){i.metrics={startTime:new Date,endTime:new Date,itemCount:e&&e.current||0,totalItemCount:i.dataset.length||0}}))},t=o([Object(n.k)(),d("design:paramtypes",[r.a,a.a])],t)}()},"examples/slickgrid/example4.html":function(t,e){t.exports='<template> <h2>${title}</h2> <div class="subtitle" innerhtml.bind="subTitle"></div> <br/> <span if.bind="metrics"> <b>Metrics:</b> ${metrics.endTime | dateFormat: \'DD MMM, h:mm:ss a\'} | ${metrics.itemCount} of ${metrics.totalItemCount} items </span> <button class="btn btn-default btn-sm" data-test="clear-filters" click.delegate="aureliaGrid.filterService.clearFilters()"> Clear Filters </button> <button class="btn btn-default btn-sm" data-test="clear-sorting" click.delegate="aureliaGrid.sortService.clearSorting()"> Clear Sorting </button> <button class="btn btn-default btn-sm" data-test="set-dynamic-filter" click.delegate="setFiltersDynamically()"> Set Filters Dynamically </button> <button class="btn btn-default btn-sm" data-test="set-dynamic-sorting" click.delegate="setSortingDynamically()"> Set Sorting Dynamically </button> <aurelia-slickgrid grid-id="grid4" column-definitions.bind="columnDefinitions" grid-options.bind="gridOptions" dataset.bind="dataset" asg-on-aurelia-grid-created.delegate="aureliaGridReady($event.detail)" asg-on-grid-state-changed.delegate="gridStateChanged($event.detail)" sg-on-row-count-changed.delegate="refreshMetrics($event.detail.eventData, $event.detail.args)"> </aurelia-slickgrid> </template> '},"examples/slickgrid/example5":function(t,e,i){"use strict";i.r(e),function(t){i.d(e,"Example5",(function(){return d}));var a=i("aurelia-framework"),r=i("1aCK"),n=i("aurelia-slickgrid"),l=function(){return(l=Object.assign||function(t){for(var e,i=1,a=arguments.length;i<a;i++)for(var r in e=arguments[i])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)},s=function(t,e,i,a){var r,n=arguments.length,l=n<3?e:null===a?a=Object.getOwnPropertyDescriptor(e,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(t,e,i,a);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(l=(n<3?r(l):n>3?r(e,i,l):r(e,i))||l);return n>3&&l&&Object.defineProperty(e,i,l),l},o=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},d=function(){function e(t){this.http=t,this.title="Example 5: Grid with Backend OData Service",this.subTitle='\n    Use it when you need to support Pagination with a OData endpoint (for simple JSON, use a regular grid)<br/>\n    Take a look at the (<a href="https://github.com/ghiscoding/aurelia-slickgrid/wiki/OData" target="_blank">Wiki documentation</a>)\n    <br/>\n    <ul class="small">\n      <li>Only "Name" field is sortable for the demo (because we use JSON files), however "multiColumnSort: true" is also supported</li>\n      <li>This example also demos the Grid State feature, open the console log to see the changes</li>\n      <li>String column also support operator (>, >=, <, <=, <>, !=, =, ==, *)\n      <ul>\n        <li>The (*) can be used as startsWith (ex.: "abc*" => startsWith "abc") / endsWith (ex.: "*xyz" => endsWith "xyz")</li>\n        <li>The other operators can be used on column type number for example: ">=100" (greater than or equal to 100)</li>\n      </ul>\n      <li>OData Service could be replaced by other Service type in the future (GraphQL or whichever you provide)</li>\n      <li>You can also preload a grid with certain "presets" like Filters / Sorters / Pagination <a href="https://github.com/ghiscoding/aurelia-slickgrid/wiki/Grid-State-&-Preset" target="_blank">Wiki - Grid Preset</a>\n    </ul>\n  ',this.dataset=[],this.isCountEnabled=!0,this.odataVersion=2,this.odataQuery="",this.processing=!1,this.status={text:"",class:""},this.defineGrid()}return e.prototype.aureliaGridReady=function(t){this.aureliaGrid=t},e.prototype.defineGrid=function(){var t=this;this.columnDefinitions=[{id:"name",name:"Name",field:"name",sortable:!0,type:n.FieldType.string,filterable:!0,filter:{model:n.Filters.compoundInput}},{id:"gender",name:"Gender",field:"gender",filterable:!0,filter:{model:n.Filters.singleSelect,collection:[{value:"",label:""},{value:"male",label:"male"},{value:"female",label:"female"}]}},{id:"company",name:"Company",field:"company"}],this.gridOptions={enableAutoResize:!0,autoResize:{containerId:"demo-container",sidePadding:10},checkboxSelector:{hideInFilterHeaderRow:!1,hideInColumnTitleRow:!0},enableCellNavigation:!0,enableFiltering:!0,enableCheckboxSelector:!0,enableRowSelection:!0,enablePagination:!0,pagination:{pageSizes:[10,20,50,100,500],pageSize:20,totalItems:0},presets:{filters:[{columnId:"gender",searchTerms:["male"],operator:n.OperatorType.equal}],sorters:[{columnId:"name",direction:"asc"}],pagination:{pageNumber:2,pageSize:20}},backendServiceApi:{service:new n.GridOdataService,options:{enableCount:this.isCountEnabled,version:this.odataVersion},preProcess:function(){return t.displaySpinner(!0)},process:function(e){return t.getCustomerApiCall(e)},postProcess:function(e){t.metrics=e.metrics,t.displaySpinner(!1),t.getCustomerCallback(e)}}}},e.prototype.displaySpinner=function(t){this.processing=t,this.status=t?{text:"processing...",class:"alert alert-danger"}:{text:"done",class:"alert alert-success"}},e.prototype.getCustomerCallback=function(t){var e="totalRecordCount";this.isCountEnabled&&(e=4===this.odataVersion?"@odata.count":"odata.count"),this.gridOptions.pagination.totalItems=t[e],this.gridOptions=l({},this.gridOptions),this.metrics&&(this.metrics.totalItemCount=t[e]),this.dataset=t.items,this.odataQuery=t.query},e.prototype.getCustomerApiCall=function(t){return this.getCustomerDataApiMock(t)},e.prototype.getCustomerDataApiMock=function(e){var i=this;return new t((function(t,a){for(var r,n=e.toLowerCase().split("&"),l=0,s="",o=100,d={},c=0,u=n;c<u.length;c++){var p=u[c];if(p.includes("$top=")&&(r=+p.substring("$top=".length)),p.includes("$skip=")&&(l=+p.substring("$skip=".length)),p.includes("$orderby=")&&(s=p.substring("$orderby=".length)),p.includes("$filter=")){var m=p.substring("$filter=".length).replace("%20"," ");if(m.includes("contains")){var f=(g=m.match(/contains\(([a-zA-Z\/]+),\s?'(.*?)'/))[1].trim();d[f]={type:"substring",term:g[2].trim()}}if(m.includes("substringof")){f=(g=m.match(/substringof\('(.*?)',([a-zA-Z ]*)/))[2].trim();d[f]={type:"substring",term:g[1].trim()}}if(m.includes("eq")){var g=m.match(/([a-zA-Z ]*) eq '(.*?)'/);if(Array.isArray(g)){f=g[1].trim();d[f]={type:"equal",term:g[2].trim()}}}if(m.includes("startswith")){f=(g=m.match(/startswith\(([a-zA-Z ]*),\s?'(.*?)'/))[1].trim();d[f]={type:"starts",term:g[2].trim()}}if(m.includes("endswith")){f=(g=m.match(/endswith\(([a-zA-Z ]*),\s?'(.*?)'/))[1].trim();d[f]={type:"ends",term:g[2].trim()}}}}var b;switch(s.includes("asc")?"ASC":s.includes("desc")?"DESC":""){case"ASC":b="assets/data/customers_100_ASC.json";break;case"DESC":b="assets/data/customers_100_DESC.json";break;default:b="assets/data/customers_100.json"}i.http.createRequest(b).asGet().send().then((function(a){var n=a.content,s=l,c=n;if(d){var u=function(t){d.hasOwnProperty(t)&&(c=c.filter((function(e){var i=d[t].type,a=d[t].term,r=t;if(t&&-1!==t.indexOf(" ")){var n=t.split(" ");r=n[n.length-1]}var l=e[r];if(l)switch(i){case"equal":return l.toLowerCase()===a;case"ends":return l.toLowerCase().endsWith(a);case"starts":return l.toLowerCase().startsWith(a);case"substring":return l.toLowerCase().includes(a)}})))};for(var p in d)u(p);o=c.length}var m=c.slice(s,s+r);setTimeout((function(){var a,r="totalRecordCount";i.isCountEnabled&&(r=4===i.odataVersion?"@odata.count":"odata.count");var n=((a={items:m})[r]=o,a.query=e,a);t(n)}),150)}))}))},e.prototype.goToFirstPage=function(){this.aureliaGrid.paginationService.goToFirstPage()},e.prototype.goToLastPage=function(){this.aureliaGrid.paginationService.goToLastPage()},e.prototype.gridStateChanged=function(t){console.log("Client sample, Grid State changed:: ",t.change)},e.prototype.setFiltersDynamically=function(){this.aureliaGrid.filterService.updateFilters([{columnId:"name",searchTerms:["A"],operator:"a*"}])},e.prototype.setSortingDynamically=function(){this.aureliaGrid.sortService.updateSorting([{columnId:"name",direction:"DESC"}])},e.prototype.changeCountEnableFlag=function(){this.isCountEnabled=!this.isCountEnabled;var t=this.gridOptions.backendServiceApi.service;return t.updateOptions({enableCount:this.isCountEnabled}),t.clearFilters(),this.aureliaGrid.filterService.clearFilters(),!0},e.prototype.setOdataVersion=function(t){this.odataVersion=t;var e=this.gridOptions.backendServiceApi.service;return e.updateOptions({version:this.odataVersion}),e.clearFilters(),this.aureliaGrid.filterService.clearFilters(),!0},e=s([Object(a.k)(),o("design:paramtypes",[r.a])],e)}()}.call(this,i("CW7D"))},"examples/slickgrid/example5.html":function(t,e){t.exports='<template> <h2>${title}</h2> <div class="subtitle" innerhtml.bind="subTitle"></div> <div class="row"> <div class="col-sm-4"> <div class.bind="status.class" role="alert" data-test="status"> <strong>Status: </strong> ${status.text} <span hidden.bind="!processing"> <i class="fa fa-refresh fa-spin fa-lg fa-fw"></i> </span> </div> <button class="btn btn-default btn-sm" data-test="set-dynamic-filter" click.delegate="setFiltersDynamically()"> Set Filters Dynamically </button> <button class="btn btn-default btn-sm" data-test="set-dynamic-sorting" click.delegate="setSortingDynamically()"> Set Sorting Dynamically </button> <br> <span if.bind="metrics"> <b>Metrics:</b> ${metrics.endTime | dateFormat: \'DD MMM, h:mm:ss a\'} | ${metrics.executionTime}ms | ${metrics.totalItemCount} items </span> </div> <div class="col-sm-8"> <div class="alert alert-info" data-test="alert-odata-query"> <strong>OData Query:</strong> <span data-test="odata-query-result">${odataQuery}</span> </div> <label>OData Version: </label> <span data-test="radioVersion"> <label class="radio-inline control-label" for="radio2"> <input type="radio" name="inlineRadioOptions" data-test="version2" id="radio2" checked="checked" value.bind="2" click.delegate="setOdataVersion(2)"> 2 </label> <label class="radio-inline control-label" for="radio4"> <input type="radio" name="inlineRadioOptions" data-test="version4" id="radio4" value.bind="4" click.delegate="setOdataVersion(4)"> 4 </label> </span> <label class="checkbox-inline control-label" for="enableCount" style="margin-left:20px"> <input type="checkbox" id="enableCount" data-test="enable-count" checked.bind="isCountEnabled" click.delegate="changeCountEnableFlag()"> <span style="font-weight:700">Enable Count</span> (add to OData query) </label> </div> </div> <div class="row col-md-12"> <label>Programmatically go to first/last page:</label> <button class="btn btn-default btn-xs" data-test="goto-first-page" click.delegate="goToFirstPage()"> <i class="fa fa-caret-left fa-lg"></i> </button> <button class="btn btn-default btn-xs" data-test="goto-last-page" click.delegate="goToLastPage()"> <i class="fa fa-caret-right fa-lg"></i> </button> </div> <aurelia-slickgrid grid-id="grid5" column-definitions.bind="columnDefinitions" grid-options.bind="gridOptions" dataset.bind="dataset" asg-on-aurelia-grid-created.delegate="aureliaGridReady($event.detail)" asg-on-grid-state-changed.delegate="gridStateChanged($event.detail)"> </aurelia-slickgrid> </template> '},"examples/slickgrid/example6.html":function(t,e){t.exports='<template> <h2>${title}</h2> <div class="subtitle" innerhtml.bind="subTitle"></div> <div class="row"> <div class="col-sm-5"> <div class.bind="status.class" role="alert" data-test="status"> <strong>Status: </strong> ${status.text} <span hidden.bind="!processing"> <i class="fa fa-refresh fa-spin fa-lg fa-fw"></i> </span> </div> <div class="row col-md-12"> <button class="btn btn-default btn-sm" data-test="clear-filters-sorting" click.delegate="clearAllFiltersAndSorts()" title="Clear all Filters & Sorts"> <i class="fa fa-filter text-danger"></i> Clear all Filter & Sorts </button> <button class="btn btn-default btn-sm" data-test="set-dynamic-filter" click.delegate="setFiltersDynamically()"> Set Filters Dynamically </button> <button class="btn btn-default btn-sm" data-test="set-dynamic-sorting" click.delegate="setSortingDynamically()"> Set Sorting Dynamically </button> </div> <div class="row col-md-12"> <button class="btn btn-default btn-sm" click.delegate="switchLanguage()" data-test="language-button"> <i class="fa fa-language"></i> Switch Language </button> <b>Locale:</b> <span style="font-style:italic" data-test="selected-locale"> ${selectedLanguage + \'.json\'} </span> </div> <br/> <div if.bind="metrics" style="margin:10px 0"> <b>Metrics:</b> ${metrics.endTime | dateFormat: \'DD MMM, h:mm:ss a\'} | ${metrics.executionTime}ms | ${metrics.totalItemCount} items </div> <div class="row col-md-12" style="margin-bottom:5px"> <label>Programmatically go to first/last page:</label> <button class="btn btn-default btn-xs" data-test="goto-first-page" click.delegate="goToFirstPage()"> <i class="fa fa-caret-left fa-lg"></i> </button> <button class="btn btn-default btn-xs" data-test="goto-last-page" click.delegate="goToLastPage()"> <i class="fa fa-caret-right fa-lg"></i> </button> </div> </div> <div class="col-sm-7"> <div class="alert alert-info" data-test="alert-graphql-query"> <strong>GraphQL Query:</strong> <span data-test="graphql-query-result">${graphqlQuery}</span> </div> </div> </div> <hr/> <aurelia-slickgrid grid-id="grid6" column-definitions.bind="columnDefinitions" grid-options.bind="gridOptions" dataset.bind="dataset" grid-height="200" grid-width="900" asg-on-aurelia-grid-created.delegate="aureliaGridReady($event.detail)" asg-on-grid-state-changed.delegate="gridStateChanged($event.detail)"> </aurelia-slickgrid> </template> '}}]);
//# sourceMappingURL=vendor~f5283f73.8409d2c470c335deec83.bundle.map